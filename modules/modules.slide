Go Modules
15:04 12 Feb 2019

Ahmad Tabbakha
Associate Software Developer, Toyota Connected
ahmad.tabbakha@toyotaconnected.com

* Existing dependency managers
- goven, godeps, dep, govendor,glide, and many more

Go Modules know how to migrate from some of these which makes our life easy.

Files That can be converted to go.mod
GLOCKFILE
Godeps/Godeps.json
Gopkg.lock
dependencies.tsv
glide.lock
vendor.conf
vendor.yml
vendor/manifest
vendor/vendor.json

* Go 1.11

-This version of go introduces go modules

`go help modules`

* Principles of versioning in Go

- Compatibility

Import compatibility rule - If and old package and new package have the same import path the new package must be backwards compatible.

- Repeatability

The result of a build of a given version of a package should not change over time.

- Cooperation

We must all work together to maintain the Go package ecosystem. Tools cannot work around a lack of cooperation.

all credit goes to Russ Cox

* Semantic versioning

Modules use semantiv versioning according to https://semver.org/
This is the format `v(major).(minor).(patch)`
Examples v0.1.0, v1.5.99, v1.2.3

Increment major version for api breaking changes.
Increment minor when adding new features.
Increment patch for bug fixes

* What is a module

A collection of related go packages that are versioned together.
Modules record precise dependency requirements and create reproducible builds.

Relationship between modules, repos, and packages
- A repo contains one or more Go Modules.
- Each module contains one or more Go packages.
- Each package consists of one or more Go source files in one directory.


* go.mod

Module source code can be located outside of the GOPATH.
Also most often you usually will end up witha single go.mod file in the root of your repo.

example file

module github.com/my/thing

require (
    github.com/some/dependency v1.2.3
    github.com/another/dependency/v4 v4.0.0
)

* go.mod directives

There are four directives that can be used inside of go.mod. module, require, replace, exclude.

module is used to declare the identity of the module which is now your module path. All packages in the module share the module import path located in the go.mod file. The sub packages in the repo will share the module path as their prefix.

Let's assume the go module directive is github.com/my/repo. In the below example we have two packages and their import paths
github.com/my/repo/bar and github.com/my/repo/foo

repo/
├── go.mod
├── bar
│   └── bar.go
└── foo
│   └── foo.go

* directives continued

Replace lets you change the import path of a specific dependency. Exclude will exlcude a specific version of a dependency. 
A good example I found on stackoverflow.

module github.com/example/project

require (
    github.com/SermoDigital/jose v0.0.0-20180104203859-803625baeddc
    github.com/google/uuid v1.1.0
)

exclude github.com/SermoDigital/jose v0.9.1

replace github.com/google/uuid v1.1.0 => git.coolaj86.com/coolaj86/uuid.go v1.1.1

the exclude directive here says to not use that version of jose. Since there are no other valid versions it will pull the latest from master. the replace directive lets you change the referenced code to a fork of the code.

* Create a module

➜  mkdir /tmp/mod
➜  cd /tmp/mod
➜  go mod init github.com/whatsadebugger/hello
go: creating new go.mod: module github.com/whatsadebugger/hello
➜  cat go.mod
module github.com/whatsadebugger/hello

package main <- create this file hello.go
import(
  "fmt"
  "rsc.io/quote"
)

func main() {
  fmt.Println(quote.Hello())
}

* Version Selection

adding new imports in your code that isn't in your go.mod file is now automatically downloaded if you run commands like 'go build', 'go test'. The highest version of the new dependency is automatically added to your go.mod with the appropriate require directive.

minimal version selection is used to select the versions of all modules used in a build. For each module in a build, the version selected by minimal version selection is always the semantically highest of the versions explicitly listed by a require directive in the main module or one of its dependencies.

example

Module A requires Module D v1.0.0
Module A requires Module B which requires Module D v1.1.1

then v1.1.1 is chosen.

* Convert a project from dep

Simplest way to use modules is to work outside the GOPATH.
You can turn modules on inside the GOPATH by setting it to on.

let's move a simple project from dep to go.


* Further Reading

There is quite a bit of information on modules that I probably did not get to cover here in detail.
Almost everything you would want to know about modules is in the wiki page below. I highly recommend reading https://github.com/golang/go/wiki/Modules

More topics to learn about and many more
- Publish modules
- Module consumption
- Custom import paths

There is a large FAQ which can answer most of your questions in the wiki linked above.


Another thing modules are capable of consuming packages that have not yet opted into modules.
I would make sure your text editor supports modules so that your auto complete doesn't break.